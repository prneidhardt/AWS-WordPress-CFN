AWSTemplateFormatVersion: 2010-09-09

Description: CloudFormation template for data-focused WordPress news site with 2
  AZs in us-west-2

Parameters:
  # Network
  VpcCidr:
    Type: String
    Default: 10.0.0.0/20 #10.0.0.0/20 in place of 10.0.0.0/16
    Description: CIDR block for the Vpc
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.8.0/24
    Description: CIDR block for public subnet
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.12.0/24
    Description: CIDR block for public subnet
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/22
    Description: CIDR block for private subnet 1
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/22
    Description: CIDR block for private subnet 2
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  # Security Group
  SshAccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The CIDR IP range that is permitted to access the SSH endpoint.
      Note - a value of 0.0.0.0/0 will allow access from ANY IP address.
    Type: String
    Default: 0.0.0.0/0

  # Database
  DBName:
    Type: String
    Default: wordpressdb
    Description: WordPress database name

  DBMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    Description: The Amazon RDS master username.
    Type: String
    MinLength: 8
    MaxLength: 16
    Default: administrator

  DBMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these
      special characters '_'`~!#$%^&*()_+,-
    Description: The Amazon RDS master password.
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41

  DBInstanceType:
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.t3.medium
      - db.t3.large
    Description: Database instance class

  DatabaseEncrpytedBoolean:
    AllowedValues:
      - true
      - false
    Default: true
    Description: Indicates whether the DB instances in the cluster are encrypted.
    Type: String

  DBAllocatedStorage:
    Type: Number
    Default: 50
    MinValue: 50
    MaxValue: 1000
    Description: Size of database (GB)

  #ALB

  # EC2
  EC2InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type for data-focused web server
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

Mappings:

  RegionMap:
    us-west-1:
      AMI: ami-0a245a00f741d6301
    us-west-2:
      AMI: ami-098e42ae54c764c35

Resources:

  # Network
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
        - Key: SubnetType
          Value: Private
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: us-west-2b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
        - Key: SubnetType
          Value: Private

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref NatRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref NatRouteTable2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: Vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc
  
  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: Vpc
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
  NatRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRT
        - Key: Network
          Value: Public
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
        - Key: SubnetType
          Value: Public
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: us-west-2b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
        - Key: SubnetType
          Value: Public

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Vpc
  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      LogGroupName: !Sub ${AWS::StackName}-FlowLog
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
  # Security Groups
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Amazon RDS cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      VpcId: !Ref Vpc
  PublicAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicAlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref PublicAlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref EC2InstanceConnectSecurityGroup
      VpcId: !Ref Vpc
  EC2InstanceConnectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 Instance Connect Endpoint
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshAccessCidr
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IC-SG
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS mount targets
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EFS-SG

  # Database
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      Engine: mysql
      DBName: !Ref DBName
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      DBInstanceClass: !Ref DBInstanceType
      AllocatedStorage: 30
      StorageType: gp3
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      PubliclyAccessible: false
      MultiAZ: true
      BackupRetentionPeriod: 14
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MySQLInstance

  # EFS file system
  WordPressFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WordPress-EFS

  # Mount targets for each private subnet
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WordPressFileSystem
      SecurityGroups:
        - !Ref EfsSecurityGroup
      SubnetId: !Ref PrivateSubnet1

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WordPressFileSystem
      SecurityGroups:
        - !Ref EfsSecurityGroup
      SubnetId: !Ref PrivateSubnet2

  #ALB
  PublicApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http2.enabled
          Value: 'true'
      SecurityGroups:
        - !Ref PublicAlbSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB
  PublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /wp-includes/images/blank.gif
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 4
      Port: 80
      Protocol: HTTP
      TargetType: instance
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: app_cookie
        - Key: stickiness.app_cookie.cookie_name
          Value: PHPSESSID
      VpcId: !Ref Vpc
      Matcher:
        HttpCode: 200,301,302
  PublicAlbListenerNoSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicAlbTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # SSM Parameter to store the database endpoint
  DatabaseEndpointParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/DatabaseEndpoint"
      Type: String
      Value: !GetAtt DatabaseInstance.Endpoint.Address
      Description: WordPress Database Endpoint

  # SSM Parameter for EFS DNS name
  EfsMountParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/EfsMountDns"
      Type: String
      Value: !Sub "${WordPressFileSystem}.efs.${AWS::Region}.amazonaws.com"
      Description: WordPress EFS Mount DNS

  # Compute
  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: ssm-param-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - DatabaseEndpointParam
      - EfsMountParam
      - MountTarget1
      - MountTarget2
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-WebServerLT
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !FindInMap 
          - RegionMap
          - !Ref AWS::Region
          - AMI
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        IamInstanceProfile:
          Name: !Ref WebInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash -xe
              # Update system
              yum update -y
              # Install NFS client for EFS
              yum install -y amazon-efs-utils nfs-utils
              # Install MySQL client
              yum install -y mysql
              # Install Amazon Linux Extras to get PHP 8.2
              amazon-linux-extras install -y php8.2
              # Install Apache and PHP packages
              yum install -y httpd php php-mysqlnd php-fpm php-json php-gd php-mbstring php-xml php-opcache
              # Install AWS CLI to get parameters
              yum install -y aws-cli
              # Configure PHP with higher limits for data processing
              echo "memory_limit = 256M" >> /etc/php.ini
              echo "upload_max_filesize = 64M" >> /etc/php.ini
              echo "post_max_size = 64M" >> /etc/php.ini
              echo "max_execution_time = 300" >> /etc/php.ini
              # Start and enable Apache
              systemctl start httpd
              systemctl enable httpd
              
              # Get database endpoint and EFS mount points from SSM Parameter Store
              DB_ENDPOINT=$(aws ssm get-parameter --name "/${AWS::StackName}/DatabaseEndpoint" --region ${AWS::Region} --query "Parameter.Value" --output text)
              EFS_DNS=$(aws ssm get-parameter --name "/${AWS::StackName}/EfsMountDns" --region ${AWS::Region} --query "Parameter.Value" --output text)
              
              # Mount EFS
              mkdir -p /var/www/html/wp-content
              echo "$EFS_DNS:/ /var/www/html/wp-content nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0" >> /etc/fstab
              mount -a
              
              # Download and configure WordPress
              cd /var/www/html
              wget https://wordpress.org/latest.tar.gz
              tar -xzf latest.tar.gz
              cp -r wordpress/* .
              rm -rf wordpress latest.tar.gz
              
              # Create wp-config.php
              cp wp-config-sample.php wp-config.php
              
              # Update WordPress configuration
              sed -i "s/database_name_here/${DBName}/" wp-config.php
              sed -i "s/username_here/${DBMasterUsername}/" wp-config.php
              sed -i "s/password_here/${DBMasterPassword}/" wp-config.php
              sed -i "s/localhost/$DB_ENDPOINT/" wp-config.php
              
              # Add ALB configuration
              cat >> wp-config.php << 'EOF'
              /* Load Balancer Configuration */
              define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);
              define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);
              /* Handle SSL if added later */
              if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
                  $_SERVER['HTTPS'] = 'on';
              }
              /* Handle visitor IPs correctly through ALB */
              if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
                  $forwarded_ips = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
                  $_SERVER['REMOTE_ADDR'] = $forwarded_ips[0];
              }
              EOF
              
              # Set proper permissions
              chown -R apache:apache /var/www/html
              chmod -R 755 /var/www/html
              
              # Restart Apache
              systemctl restart httpd

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - WebServerLaunchTemplate
      - PublicAlbTargetGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-WebServerASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Cooldown: 300
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebServer
          PropagateAtLaunch: true

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale up if CPU > 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
        - !Ref ScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale down if CPU < 40% for 15 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 40
      AlarmActions:
        - !Ref ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: LessThanThreshold

  # EC2 Instance Connect Endpoint
  EC2InstanceConnectEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EC2InstanceConnectSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IC-Endpoint

  # CloudWatch alarm
  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert if Database CPU exceeds 80%
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DatabaseInstance

Outputs:
  Vpc:
    Value: !Ref Vpc
  VpcCidr:
    Value: !Ref VpcCidr
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2

  DatabaseSecurityGroup:
    Value: !Ref DatabaseSecurityGroup
  PublicAlbSecurityGroup:
    Value: !Ref PublicAlbSecurityGroup
  WebSecurityGroup:
    Value: !Ref WebSecurityGroup

  DatabaseName:
    Value: !Ref DBName
  DatabaseInstance:
    Value: !Ref DatabaseInstance
  DatabaseEndpointAddress:
    Value: !GetAtt DatabaseInstance.Endpoint.Address

  EC2InstanceConnectEndpointId:
    Description: ID of the EC2 Instance Connect Endpoint
    Value: !Ref EC2InstanceConnectEndpoint
  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebServerAutoScalingGroup
  LaunchTemplateName:
    Description: Name of the Launch Template
    Value: !Ref WebServerLaunchTemplate
  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt PublicApplicationLoadBalancer.DNSName

  WordPressFileSystemId:
    Description: ID of the EFS File System
    Value: !Ref WordPressFileSystem
  EfsMountDns:
    Description: DNS name for the EFS mount
    Value: !Sub ${WordPressFileSystem}.efs.${AWS::Region}.amazonaws.com